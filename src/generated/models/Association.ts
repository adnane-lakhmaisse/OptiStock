
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Association` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Association
 * 
 */
export type AssociationModel = runtime.Types.Result.DefaultSelection<Prisma.$AssociationPayload>

export type AggregateAssociation = {
  _count: AssociationCountAggregateOutputType | null
  _min: AssociationMinAggregateOutputType | null
  _max: AssociationMaxAggregateOutputType | null
}

export type AssociationMinAggregateOutputType = {
  id: string | null
  name: string | null
  email: string | null
}

export type AssociationMaxAggregateOutputType = {
  id: string | null
  name: string | null
  email: string | null
}

export type AssociationCountAggregateOutputType = {
  id: number
  name: number
  email: number
  _all: number
}


export type AssociationMinAggregateInputType = {
  id?: true
  name?: true
  email?: true
}

export type AssociationMaxAggregateInputType = {
  id?: true
  name?: true
  email?: true
}

export type AssociationCountAggregateInputType = {
  id?: true
  name?: true
  email?: true
  _all?: true
}

export type AssociationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Association to aggregate.
   */
  where?: Prisma.AssociationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Associations to fetch.
   */
  orderBy?: Prisma.AssociationOrderByWithRelationInput | Prisma.AssociationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AssociationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Associations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Associations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Associations
  **/
  _count?: true | AssociationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AssociationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AssociationMaxAggregateInputType
}

export type GetAssociationAggregateType<T extends AssociationAggregateArgs> = {
      [P in keyof T & keyof AggregateAssociation]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAssociation[P]>
    : Prisma.GetScalarType<T[P], AggregateAssociation[P]>
}




export type AssociationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AssociationWhereInput
  orderBy?: Prisma.AssociationOrderByWithAggregationInput | Prisma.AssociationOrderByWithAggregationInput[]
  by: Prisma.AssociationScalarFieldEnum[] | Prisma.AssociationScalarFieldEnum
  having?: Prisma.AssociationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AssociationCountAggregateInputType | true
  _min?: AssociationMinAggregateInputType
  _max?: AssociationMaxAggregateInputType
}

export type AssociationGroupByOutputType = {
  id: string
  name: string
  email: string
  _count: AssociationCountAggregateOutputType | null
  _min: AssociationMinAggregateOutputType | null
  _max: AssociationMaxAggregateOutputType | null
}

type GetAssociationGroupByPayload<T extends AssociationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AssociationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AssociationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AssociationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AssociationGroupByOutputType[P]>
      }
    >
  >



export type AssociationWhereInput = {
  AND?: Prisma.AssociationWhereInput | Prisma.AssociationWhereInput[]
  OR?: Prisma.AssociationWhereInput[]
  NOT?: Prisma.AssociationWhereInput | Prisma.AssociationWhereInput[]
  id?: Prisma.StringFilter<"Association"> | string
  name?: Prisma.StringFilter<"Association"> | string
  email?: Prisma.StringFilter<"Association"> | string
  products?: Prisma.ProductListRelationFilter
  categories?: Prisma.CategoryListRelationFilter
  transactions?: Prisma.TransactionListRelationFilter
}

export type AssociationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  products?: Prisma.ProductOrderByRelationAggregateInput
  categories?: Prisma.CategoryOrderByRelationAggregateInput
  transactions?: Prisma.TransactionOrderByRelationAggregateInput
}

export type AssociationWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  email?: string
  AND?: Prisma.AssociationWhereInput | Prisma.AssociationWhereInput[]
  OR?: Prisma.AssociationWhereInput[]
  NOT?: Prisma.AssociationWhereInput | Prisma.AssociationWhereInput[]
  name?: Prisma.StringFilter<"Association"> | string
  products?: Prisma.ProductListRelationFilter
  categories?: Prisma.CategoryListRelationFilter
  transactions?: Prisma.TransactionListRelationFilter
}, "id" | "email">

export type AssociationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  _count?: Prisma.AssociationCountOrderByAggregateInput
  _max?: Prisma.AssociationMaxOrderByAggregateInput
  _min?: Prisma.AssociationMinOrderByAggregateInput
}

export type AssociationScalarWhereWithAggregatesInput = {
  AND?: Prisma.AssociationScalarWhereWithAggregatesInput | Prisma.AssociationScalarWhereWithAggregatesInput[]
  OR?: Prisma.AssociationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AssociationScalarWhereWithAggregatesInput | Prisma.AssociationScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Association"> | string
  name?: Prisma.StringWithAggregatesFilter<"Association"> | string
  email?: Prisma.StringWithAggregatesFilter<"Association"> | string
}

export type AssociationCreateInput = {
  id?: string
  name: string
  email: string
  products?: Prisma.ProductCreateNestedManyWithoutAssociationInput
  categories?: Prisma.CategoryCreateNestedManyWithoutAssociationInput
  transactions?: Prisma.TransactionCreateNestedManyWithoutAssociationInput
}

export type AssociationUncheckedCreateInput = {
  id?: string
  name: string
  email: string
  products?: Prisma.ProductUncheckedCreateNestedManyWithoutAssociationInput
  categories?: Prisma.CategoryUncheckedCreateNestedManyWithoutAssociationInput
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutAssociationInput
}

export type AssociationUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  products?: Prisma.ProductUpdateManyWithoutAssociationNestedInput
  categories?: Prisma.CategoryUpdateManyWithoutAssociationNestedInput
  transactions?: Prisma.TransactionUpdateManyWithoutAssociationNestedInput
}

export type AssociationUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  products?: Prisma.ProductUncheckedUpdateManyWithoutAssociationNestedInput
  categories?: Prisma.CategoryUncheckedUpdateManyWithoutAssociationNestedInput
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutAssociationNestedInput
}

export type AssociationCreateManyInput = {
  id?: string
  name: string
  email: string
}

export type AssociationUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AssociationUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AssociationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
}

export type AssociationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
}

export type AssociationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
}

export type AssociationNullableScalarRelationFilter = {
  is?: Prisma.AssociationWhereInput | null
  isNot?: Prisma.AssociationWhereInput | null
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type AssociationCreateNestedOneWithoutProductsInput = {
  create?: Prisma.XOR<Prisma.AssociationCreateWithoutProductsInput, Prisma.AssociationUncheckedCreateWithoutProductsInput>
  connectOrCreate?: Prisma.AssociationCreateOrConnectWithoutProductsInput
  connect?: Prisma.AssociationWhereUniqueInput
}

export type AssociationUpdateOneWithoutProductsNestedInput = {
  create?: Prisma.XOR<Prisma.AssociationCreateWithoutProductsInput, Prisma.AssociationUncheckedCreateWithoutProductsInput>
  connectOrCreate?: Prisma.AssociationCreateOrConnectWithoutProductsInput
  upsert?: Prisma.AssociationUpsertWithoutProductsInput
  disconnect?: Prisma.AssociationWhereInput | boolean
  delete?: Prisma.AssociationWhereInput | boolean
  connect?: Prisma.AssociationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AssociationUpdateToOneWithWhereWithoutProductsInput, Prisma.AssociationUpdateWithoutProductsInput>, Prisma.AssociationUncheckedUpdateWithoutProductsInput>
}

export type AssociationCreateNestedOneWithoutCategoriesInput = {
  create?: Prisma.XOR<Prisma.AssociationCreateWithoutCategoriesInput, Prisma.AssociationUncheckedCreateWithoutCategoriesInput>
  connectOrCreate?: Prisma.AssociationCreateOrConnectWithoutCategoriesInput
  connect?: Prisma.AssociationWhereUniqueInput
}

export type AssociationUpdateOneWithoutCategoriesNestedInput = {
  create?: Prisma.XOR<Prisma.AssociationCreateWithoutCategoriesInput, Prisma.AssociationUncheckedCreateWithoutCategoriesInput>
  connectOrCreate?: Prisma.AssociationCreateOrConnectWithoutCategoriesInput
  upsert?: Prisma.AssociationUpsertWithoutCategoriesInput
  disconnect?: Prisma.AssociationWhereInput | boolean
  delete?: Prisma.AssociationWhereInput | boolean
  connect?: Prisma.AssociationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AssociationUpdateToOneWithWhereWithoutCategoriesInput, Prisma.AssociationUpdateWithoutCategoriesInput>, Prisma.AssociationUncheckedUpdateWithoutCategoriesInput>
}

export type AssociationCreateNestedOneWithoutTransactionsInput = {
  create?: Prisma.XOR<Prisma.AssociationCreateWithoutTransactionsInput, Prisma.AssociationUncheckedCreateWithoutTransactionsInput>
  connectOrCreate?: Prisma.AssociationCreateOrConnectWithoutTransactionsInput
  connect?: Prisma.AssociationWhereUniqueInput
}

export type AssociationUpdateOneWithoutTransactionsNestedInput = {
  create?: Prisma.XOR<Prisma.AssociationCreateWithoutTransactionsInput, Prisma.AssociationUncheckedCreateWithoutTransactionsInput>
  connectOrCreate?: Prisma.AssociationCreateOrConnectWithoutTransactionsInput
  upsert?: Prisma.AssociationUpsertWithoutTransactionsInput
  disconnect?: Prisma.AssociationWhereInput | boolean
  delete?: Prisma.AssociationWhereInput | boolean
  connect?: Prisma.AssociationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AssociationUpdateToOneWithWhereWithoutTransactionsInput, Prisma.AssociationUpdateWithoutTransactionsInput>, Prisma.AssociationUncheckedUpdateWithoutTransactionsInput>
}

export type AssociationCreateWithoutProductsInput = {
  id?: string
  name: string
  email: string
  categories?: Prisma.CategoryCreateNestedManyWithoutAssociationInput
  transactions?: Prisma.TransactionCreateNestedManyWithoutAssociationInput
}

export type AssociationUncheckedCreateWithoutProductsInput = {
  id?: string
  name: string
  email: string
  categories?: Prisma.CategoryUncheckedCreateNestedManyWithoutAssociationInput
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutAssociationInput
}

export type AssociationCreateOrConnectWithoutProductsInput = {
  where: Prisma.AssociationWhereUniqueInput
  create: Prisma.XOR<Prisma.AssociationCreateWithoutProductsInput, Prisma.AssociationUncheckedCreateWithoutProductsInput>
}

export type AssociationUpsertWithoutProductsInput = {
  update: Prisma.XOR<Prisma.AssociationUpdateWithoutProductsInput, Prisma.AssociationUncheckedUpdateWithoutProductsInput>
  create: Prisma.XOR<Prisma.AssociationCreateWithoutProductsInput, Prisma.AssociationUncheckedCreateWithoutProductsInput>
  where?: Prisma.AssociationWhereInput
}

export type AssociationUpdateToOneWithWhereWithoutProductsInput = {
  where?: Prisma.AssociationWhereInput
  data: Prisma.XOR<Prisma.AssociationUpdateWithoutProductsInput, Prisma.AssociationUncheckedUpdateWithoutProductsInput>
}

export type AssociationUpdateWithoutProductsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  categories?: Prisma.CategoryUpdateManyWithoutAssociationNestedInput
  transactions?: Prisma.TransactionUpdateManyWithoutAssociationNestedInput
}

export type AssociationUncheckedUpdateWithoutProductsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  categories?: Prisma.CategoryUncheckedUpdateManyWithoutAssociationNestedInput
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutAssociationNestedInput
}

export type AssociationCreateWithoutCategoriesInput = {
  id?: string
  name: string
  email: string
  products?: Prisma.ProductCreateNestedManyWithoutAssociationInput
  transactions?: Prisma.TransactionCreateNestedManyWithoutAssociationInput
}

export type AssociationUncheckedCreateWithoutCategoriesInput = {
  id?: string
  name: string
  email: string
  products?: Prisma.ProductUncheckedCreateNestedManyWithoutAssociationInput
  transactions?: Prisma.TransactionUncheckedCreateNestedManyWithoutAssociationInput
}

export type AssociationCreateOrConnectWithoutCategoriesInput = {
  where: Prisma.AssociationWhereUniqueInput
  create: Prisma.XOR<Prisma.AssociationCreateWithoutCategoriesInput, Prisma.AssociationUncheckedCreateWithoutCategoriesInput>
}

export type AssociationUpsertWithoutCategoriesInput = {
  update: Prisma.XOR<Prisma.AssociationUpdateWithoutCategoriesInput, Prisma.AssociationUncheckedUpdateWithoutCategoriesInput>
  create: Prisma.XOR<Prisma.AssociationCreateWithoutCategoriesInput, Prisma.AssociationUncheckedCreateWithoutCategoriesInput>
  where?: Prisma.AssociationWhereInput
}

export type AssociationUpdateToOneWithWhereWithoutCategoriesInput = {
  where?: Prisma.AssociationWhereInput
  data: Prisma.XOR<Prisma.AssociationUpdateWithoutCategoriesInput, Prisma.AssociationUncheckedUpdateWithoutCategoriesInput>
}

export type AssociationUpdateWithoutCategoriesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  products?: Prisma.ProductUpdateManyWithoutAssociationNestedInput
  transactions?: Prisma.TransactionUpdateManyWithoutAssociationNestedInput
}

export type AssociationUncheckedUpdateWithoutCategoriesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  products?: Prisma.ProductUncheckedUpdateManyWithoutAssociationNestedInput
  transactions?: Prisma.TransactionUncheckedUpdateManyWithoutAssociationNestedInput
}

export type AssociationCreateWithoutTransactionsInput = {
  id?: string
  name: string
  email: string
  products?: Prisma.ProductCreateNestedManyWithoutAssociationInput
  categories?: Prisma.CategoryCreateNestedManyWithoutAssociationInput
}

export type AssociationUncheckedCreateWithoutTransactionsInput = {
  id?: string
  name: string
  email: string
  products?: Prisma.ProductUncheckedCreateNestedManyWithoutAssociationInput
  categories?: Prisma.CategoryUncheckedCreateNestedManyWithoutAssociationInput
}

export type AssociationCreateOrConnectWithoutTransactionsInput = {
  where: Prisma.AssociationWhereUniqueInput
  create: Prisma.XOR<Prisma.AssociationCreateWithoutTransactionsInput, Prisma.AssociationUncheckedCreateWithoutTransactionsInput>
}

export type AssociationUpsertWithoutTransactionsInput = {
  update: Prisma.XOR<Prisma.AssociationUpdateWithoutTransactionsInput, Prisma.AssociationUncheckedUpdateWithoutTransactionsInput>
  create: Prisma.XOR<Prisma.AssociationCreateWithoutTransactionsInput, Prisma.AssociationUncheckedCreateWithoutTransactionsInput>
  where?: Prisma.AssociationWhereInput
}

export type AssociationUpdateToOneWithWhereWithoutTransactionsInput = {
  where?: Prisma.AssociationWhereInput
  data: Prisma.XOR<Prisma.AssociationUpdateWithoutTransactionsInput, Prisma.AssociationUncheckedUpdateWithoutTransactionsInput>
}

export type AssociationUpdateWithoutTransactionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  products?: Prisma.ProductUpdateManyWithoutAssociationNestedInput
  categories?: Prisma.CategoryUpdateManyWithoutAssociationNestedInput
}

export type AssociationUncheckedUpdateWithoutTransactionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  products?: Prisma.ProductUncheckedUpdateManyWithoutAssociationNestedInput
  categories?: Prisma.CategoryUncheckedUpdateManyWithoutAssociationNestedInput
}


/**
 * Count Type AssociationCountOutputType
 */

export type AssociationCountOutputType = {
  products: number
  categories: number
  transactions: number
}

export type AssociationCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  products?: boolean | AssociationCountOutputTypeCountProductsArgs
  categories?: boolean | AssociationCountOutputTypeCountCategoriesArgs
  transactions?: boolean | AssociationCountOutputTypeCountTransactionsArgs
}

/**
 * AssociationCountOutputType without action
 */
export type AssociationCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssociationCountOutputType
   */
  select?: Prisma.AssociationCountOutputTypeSelect<ExtArgs> | null
}

/**
 * AssociationCountOutputType without action
 */
export type AssociationCountOutputTypeCountProductsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProductWhereInput
}

/**
 * AssociationCountOutputType without action
 */
export type AssociationCountOutputTypeCountCategoriesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CategoryWhereInput
}

/**
 * AssociationCountOutputType without action
 */
export type AssociationCountOutputTypeCountTransactionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TransactionWhereInput
}


export type AssociationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
  products?: boolean | Prisma.Association$productsArgs<ExtArgs>
  categories?: boolean | Prisma.Association$categoriesArgs<ExtArgs>
  transactions?: boolean | Prisma.Association$transactionsArgs<ExtArgs>
  _count?: boolean | Prisma.AssociationCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["association"]>

export type AssociationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
}, ExtArgs["result"]["association"]>

export type AssociationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
}, ExtArgs["result"]["association"]>

export type AssociationSelectScalar = {
  id?: boolean
  name?: boolean
  email?: boolean
}

export type AssociationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "email", ExtArgs["result"]["association"]>
export type AssociationInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  products?: boolean | Prisma.Association$productsArgs<ExtArgs>
  categories?: boolean | Prisma.Association$categoriesArgs<ExtArgs>
  transactions?: boolean | Prisma.Association$transactionsArgs<ExtArgs>
  _count?: boolean | Prisma.AssociationCountOutputTypeDefaultArgs<ExtArgs>
}
export type AssociationIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type AssociationIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $AssociationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Association"
  objects: {
    products: Prisma.$ProductPayload<ExtArgs>[]
    categories: Prisma.$CategoryPayload<ExtArgs>[]
    transactions: Prisma.$TransactionPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    email: string
  }, ExtArgs["result"]["association"]>
  composites: {}
}

export type AssociationGetPayload<S extends boolean | null | undefined | AssociationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AssociationPayload, S>

export type AssociationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AssociationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AssociationCountAggregateInputType | true
  }

export interface AssociationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Association'], meta: { name: 'Association' } }
  /**
   * Find zero or one Association that matches the filter.
   * @param {AssociationFindUniqueArgs} args - Arguments to find a Association
   * @example
   * // Get one Association
   * const association = await prisma.association.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AssociationFindUniqueArgs>(args: Prisma.SelectSubset<T, AssociationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AssociationClient<runtime.Types.Result.GetResult<Prisma.$AssociationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Association that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AssociationFindUniqueOrThrowArgs} args - Arguments to find a Association
   * @example
   * // Get one Association
   * const association = await prisma.association.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AssociationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AssociationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AssociationClient<runtime.Types.Result.GetResult<Prisma.$AssociationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Association that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssociationFindFirstArgs} args - Arguments to find a Association
   * @example
   * // Get one Association
   * const association = await prisma.association.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AssociationFindFirstArgs>(args?: Prisma.SelectSubset<T, AssociationFindFirstArgs<ExtArgs>>): Prisma.Prisma__AssociationClient<runtime.Types.Result.GetResult<Prisma.$AssociationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Association that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssociationFindFirstOrThrowArgs} args - Arguments to find a Association
   * @example
   * // Get one Association
   * const association = await prisma.association.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AssociationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AssociationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AssociationClient<runtime.Types.Result.GetResult<Prisma.$AssociationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Associations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssociationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Associations
   * const associations = await prisma.association.findMany()
   * 
   * // Get first 10 Associations
   * const associations = await prisma.association.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const associationWithIdOnly = await prisma.association.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AssociationFindManyArgs>(args?: Prisma.SelectSubset<T, AssociationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssociationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Association.
   * @param {AssociationCreateArgs} args - Arguments to create a Association.
   * @example
   * // Create one Association
   * const Association = await prisma.association.create({
   *   data: {
   *     // ... data to create a Association
   *   }
   * })
   * 
   */
  create<T extends AssociationCreateArgs>(args: Prisma.SelectSubset<T, AssociationCreateArgs<ExtArgs>>): Prisma.Prisma__AssociationClient<runtime.Types.Result.GetResult<Prisma.$AssociationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Associations.
   * @param {AssociationCreateManyArgs} args - Arguments to create many Associations.
   * @example
   * // Create many Associations
   * const association = await prisma.association.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AssociationCreateManyArgs>(args?: Prisma.SelectSubset<T, AssociationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Associations and returns the data saved in the database.
   * @param {AssociationCreateManyAndReturnArgs} args - Arguments to create many Associations.
   * @example
   * // Create many Associations
   * const association = await prisma.association.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Associations and only return the `id`
   * const associationWithIdOnly = await prisma.association.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AssociationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AssociationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssociationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Association.
   * @param {AssociationDeleteArgs} args - Arguments to delete one Association.
   * @example
   * // Delete one Association
   * const Association = await prisma.association.delete({
   *   where: {
   *     // ... filter to delete one Association
   *   }
   * })
   * 
   */
  delete<T extends AssociationDeleteArgs>(args: Prisma.SelectSubset<T, AssociationDeleteArgs<ExtArgs>>): Prisma.Prisma__AssociationClient<runtime.Types.Result.GetResult<Prisma.$AssociationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Association.
   * @param {AssociationUpdateArgs} args - Arguments to update one Association.
   * @example
   * // Update one Association
   * const association = await prisma.association.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AssociationUpdateArgs>(args: Prisma.SelectSubset<T, AssociationUpdateArgs<ExtArgs>>): Prisma.Prisma__AssociationClient<runtime.Types.Result.GetResult<Prisma.$AssociationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Associations.
   * @param {AssociationDeleteManyArgs} args - Arguments to filter Associations to delete.
   * @example
   * // Delete a few Associations
   * const { count } = await prisma.association.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AssociationDeleteManyArgs>(args?: Prisma.SelectSubset<T, AssociationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Associations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssociationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Associations
   * const association = await prisma.association.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AssociationUpdateManyArgs>(args: Prisma.SelectSubset<T, AssociationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Associations and returns the data updated in the database.
   * @param {AssociationUpdateManyAndReturnArgs} args - Arguments to update many Associations.
   * @example
   * // Update many Associations
   * const association = await prisma.association.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Associations and only return the `id`
   * const associationWithIdOnly = await prisma.association.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AssociationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AssociationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssociationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Association.
   * @param {AssociationUpsertArgs} args - Arguments to update or create a Association.
   * @example
   * // Update or create a Association
   * const association = await prisma.association.upsert({
   *   create: {
   *     // ... data to create a Association
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Association we want to update
   *   }
   * })
   */
  upsert<T extends AssociationUpsertArgs>(args: Prisma.SelectSubset<T, AssociationUpsertArgs<ExtArgs>>): Prisma.Prisma__AssociationClient<runtime.Types.Result.GetResult<Prisma.$AssociationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Associations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssociationCountArgs} args - Arguments to filter Associations to count.
   * @example
   * // Count the number of Associations
   * const count = await prisma.association.count({
   *   where: {
   *     // ... the filter for the Associations we want to count
   *   }
   * })
  **/
  count<T extends AssociationCountArgs>(
    args?: Prisma.Subset<T, AssociationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AssociationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Association.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssociationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AssociationAggregateArgs>(args: Prisma.Subset<T, AssociationAggregateArgs>): Prisma.PrismaPromise<GetAssociationAggregateType<T>>

  /**
   * Group by Association.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssociationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AssociationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AssociationGroupByArgs['orderBy'] }
      : { orderBy?: AssociationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AssociationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssociationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Association model
 */
readonly fields: AssociationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Association.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AssociationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  products<T extends Prisma.Association$productsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Association$productsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  categories<T extends Prisma.Association$categoriesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Association$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  transactions<T extends Prisma.Association$transactionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Association$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Association model
 */
export interface AssociationFieldRefs {
  readonly id: Prisma.FieldRef<"Association", 'String'>
  readonly name: Prisma.FieldRef<"Association", 'String'>
  readonly email: Prisma.FieldRef<"Association", 'String'>
}
    

// Custom InputTypes
/**
 * Association findUnique
 */
export type AssociationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Association
   */
  select?: Prisma.AssociationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Association
   */
  omit?: Prisma.AssociationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssociationInclude<ExtArgs> | null
  /**
   * Filter, which Association to fetch.
   */
  where: Prisma.AssociationWhereUniqueInput
}

/**
 * Association findUniqueOrThrow
 */
export type AssociationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Association
   */
  select?: Prisma.AssociationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Association
   */
  omit?: Prisma.AssociationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssociationInclude<ExtArgs> | null
  /**
   * Filter, which Association to fetch.
   */
  where: Prisma.AssociationWhereUniqueInput
}

/**
 * Association findFirst
 */
export type AssociationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Association
   */
  select?: Prisma.AssociationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Association
   */
  omit?: Prisma.AssociationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssociationInclude<ExtArgs> | null
  /**
   * Filter, which Association to fetch.
   */
  where?: Prisma.AssociationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Associations to fetch.
   */
  orderBy?: Prisma.AssociationOrderByWithRelationInput | Prisma.AssociationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Associations.
   */
  cursor?: Prisma.AssociationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Associations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Associations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Associations.
   */
  distinct?: Prisma.AssociationScalarFieldEnum | Prisma.AssociationScalarFieldEnum[]
}

/**
 * Association findFirstOrThrow
 */
export type AssociationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Association
   */
  select?: Prisma.AssociationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Association
   */
  omit?: Prisma.AssociationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssociationInclude<ExtArgs> | null
  /**
   * Filter, which Association to fetch.
   */
  where?: Prisma.AssociationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Associations to fetch.
   */
  orderBy?: Prisma.AssociationOrderByWithRelationInput | Prisma.AssociationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Associations.
   */
  cursor?: Prisma.AssociationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Associations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Associations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Associations.
   */
  distinct?: Prisma.AssociationScalarFieldEnum | Prisma.AssociationScalarFieldEnum[]
}

/**
 * Association findMany
 */
export type AssociationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Association
   */
  select?: Prisma.AssociationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Association
   */
  omit?: Prisma.AssociationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssociationInclude<ExtArgs> | null
  /**
   * Filter, which Associations to fetch.
   */
  where?: Prisma.AssociationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Associations to fetch.
   */
  orderBy?: Prisma.AssociationOrderByWithRelationInput | Prisma.AssociationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Associations.
   */
  cursor?: Prisma.AssociationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Associations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Associations.
   */
  skip?: number
  distinct?: Prisma.AssociationScalarFieldEnum | Prisma.AssociationScalarFieldEnum[]
}

/**
 * Association create
 */
export type AssociationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Association
   */
  select?: Prisma.AssociationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Association
   */
  omit?: Prisma.AssociationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssociationInclude<ExtArgs> | null
  /**
   * The data needed to create a Association.
   */
  data: Prisma.XOR<Prisma.AssociationCreateInput, Prisma.AssociationUncheckedCreateInput>
}

/**
 * Association createMany
 */
export type AssociationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Associations.
   */
  data: Prisma.AssociationCreateManyInput | Prisma.AssociationCreateManyInput[]
}

/**
 * Association createManyAndReturn
 */
export type AssociationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Association
   */
  select?: Prisma.AssociationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Association
   */
  omit?: Prisma.AssociationOmit<ExtArgs> | null
  /**
   * The data used to create many Associations.
   */
  data: Prisma.AssociationCreateManyInput | Prisma.AssociationCreateManyInput[]
}

/**
 * Association update
 */
export type AssociationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Association
   */
  select?: Prisma.AssociationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Association
   */
  omit?: Prisma.AssociationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssociationInclude<ExtArgs> | null
  /**
   * The data needed to update a Association.
   */
  data: Prisma.XOR<Prisma.AssociationUpdateInput, Prisma.AssociationUncheckedUpdateInput>
  /**
   * Choose, which Association to update.
   */
  where: Prisma.AssociationWhereUniqueInput
}

/**
 * Association updateMany
 */
export type AssociationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Associations.
   */
  data: Prisma.XOR<Prisma.AssociationUpdateManyMutationInput, Prisma.AssociationUncheckedUpdateManyInput>
  /**
   * Filter which Associations to update
   */
  where?: Prisma.AssociationWhereInput
  /**
   * Limit how many Associations to update.
   */
  limit?: number
}

/**
 * Association updateManyAndReturn
 */
export type AssociationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Association
   */
  select?: Prisma.AssociationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Association
   */
  omit?: Prisma.AssociationOmit<ExtArgs> | null
  /**
   * The data used to update Associations.
   */
  data: Prisma.XOR<Prisma.AssociationUpdateManyMutationInput, Prisma.AssociationUncheckedUpdateManyInput>
  /**
   * Filter which Associations to update
   */
  where?: Prisma.AssociationWhereInput
  /**
   * Limit how many Associations to update.
   */
  limit?: number
}

/**
 * Association upsert
 */
export type AssociationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Association
   */
  select?: Prisma.AssociationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Association
   */
  omit?: Prisma.AssociationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssociationInclude<ExtArgs> | null
  /**
   * The filter to search for the Association to update in case it exists.
   */
  where: Prisma.AssociationWhereUniqueInput
  /**
   * In case the Association found by the `where` argument doesn't exist, create a new Association with this data.
   */
  create: Prisma.XOR<Prisma.AssociationCreateInput, Prisma.AssociationUncheckedCreateInput>
  /**
   * In case the Association was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AssociationUpdateInput, Prisma.AssociationUncheckedUpdateInput>
}

/**
 * Association delete
 */
export type AssociationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Association
   */
  select?: Prisma.AssociationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Association
   */
  omit?: Prisma.AssociationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssociationInclude<ExtArgs> | null
  /**
   * Filter which Association to delete.
   */
  where: Prisma.AssociationWhereUniqueInput
}

/**
 * Association deleteMany
 */
export type AssociationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Associations to delete
   */
  where?: Prisma.AssociationWhereInput
  /**
   * Limit how many Associations to delete.
   */
  limit?: number
}

/**
 * Association.products
 */
export type Association$productsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Product
   */
  select?: Prisma.ProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Product
   */
  omit?: Prisma.ProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductInclude<ExtArgs> | null
  where?: Prisma.ProductWhereInput
  orderBy?: Prisma.ProductOrderByWithRelationInput | Prisma.ProductOrderByWithRelationInput[]
  cursor?: Prisma.ProductWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProductScalarFieldEnum | Prisma.ProductScalarFieldEnum[]
}

/**
 * Association.categories
 */
export type Association$categoriesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Category
   */
  select?: Prisma.CategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Category
   */
  omit?: Prisma.CategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CategoryInclude<ExtArgs> | null
  where?: Prisma.CategoryWhereInput
  orderBy?: Prisma.CategoryOrderByWithRelationInput | Prisma.CategoryOrderByWithRelationInput[]
  cursor?: Prisma.CategoryWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CategoryScalarFieldEnum | Prisma.CategoryScalarFieldEnum[]
}

/**
 * Association.transactions
 */
export type Association$transactionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null
  where?: Prisma.TransactionWhereInput
  orderBy?: Prisma.TransactionOrderByWithRelationInput | Prisma.TransactionOrderByWithRelationInput[]
  cursor?: Prisma.TransactionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TransactionScalarFieldEnum | Prisma.TransactionScalarFieldEnum[]
}

/**
 * Association without action
 */
export type AssociationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Association
   */
  select?: Prisma.AssociationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Association
   */
  omit?: Prisma.AssociationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssociationInclude<ExtArgs> | null
}
